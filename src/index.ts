import { app, BrowserWindow } from 'electron';
const path = require('path');
const { fork } = require('child_process');
import isDev from 'electron-is-dev'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let serverProcess: any;
let serverPort: number = 5000;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.webContents.on('will-navigate', (event, url) => {
    const { pathname } = new URL(url);
    const hasExtension = pathname.includes('.');
    if (!hasExtension) {
      event.preventDefault();
      mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    }
  });
};
const startServerAndWindow = async () => {
  let retries = 10;
  while (retries > 0) {
    try {
      // console.log('Waiting for server to start...');
      const res = await fetch(`http://localhost:${serverPort}/api/ping`);
      // console.log(res);
      if (res.ok) {
        console.log('Server is ready');
        createWindow();
        return;
      }
    } catch {
      retries--;
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  console.error('Failed to start server after retries');
  app.quit();
};
// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // ðŸ”¥ Start the Express server

  const serverPath = path.join(__dirname, '../../backend/server.js');
  const userDataPath = app.getPath('userData');
  console.log(`Setting DB_PATH to: ${userDataPath}`);
  serverProcess = fork(serverPath, [], {
    env: {
      ...process.env,
      NODE_ENV: isDev ? 'development' : 'production',
      DB_PATH: userDataPath,
    },
    stdio: ['pipe', 'pipe', 'pipe', 'ipc'],
  });
  serverProcess.on('error', (err: Error) => console.error('Server process error:', err));
  serverProcess.on('exit', (code: any) => console.error(`Server process exited with code ${code}`));
  serverProcess.stdout.on('data', (data: any) => console.log(`Server stdout: ${data}`));
  serverProcess.stderr.on('data', (data: any) => console.error(`Server stderr: ${data}`));
  serverProcess.on('message', (msg: { port?: number }) => {
    if (msg.port) {
      serverPort = msg.port;
      console.log(`Server running on port ${serverPort}`);
    }
  });
  startServerAndWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (serverProcess) serverProcess.kill();
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import { ipcMain } from 'electron';
import fetch from 'node-fetch';
import FormData from 'form-data';

ipcMain.handle('login', async (_event, { email, password }) => {
  try {
    const response = await fetch('http://localhost:5000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });
    if (!response.ok) {
      const errorData = await response.json() as { message?: string };
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }
    return response.json();
  } catch (error) {
    throw new Error(error.message || 'Login failed');
  }
});
ipcMain.handle('get-products', async (_event, search) => {
  const res = await fetch(`http://localhost:5000/api/products?search=${encodeURIComponent(search)}`);
  return res.json();
});

ipcMain.handle('add-product', async (_event, product) => {
  const response = await fetch('http://localhost:5000/api/products', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(product)
  });
  return response.json();
});

ipcMain.handle('upload-products-csv', async (_event, data) => {
  const response = await fetch('http://localhost:5000/api/products/upload-csv', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ products: data })
  });
  return response.json();
});

ipcMain.handle('get-orders', async () => {
  const res = await fetch("http://localhost:5000/api/orders");
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});
ipcMain.handle('get-inventory', async () => {
  const res = await fetch("http://localhost:5000/api/inventory");
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});

ipcMain.handle('get-inventory-alerts', async () => {
  const res = await fetch("http://localhost:5000/api/inventory/alerts");
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  const data = await res.json();
  return data;
});

ipcMain.handle('get-inventory-forecast', async () => {
  const res = await fetch("http://localhost:5000/api/inventory/forecast");
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});

ipcMain.handle('get-analytics-data', async () => {
  const res = await fetch("http://localhost:5000/api/analytics");
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});

ipcMain.handle('get-analytics-insights', async () => {
  const res = await fetch("http://localhost:5000/api/analytics/insights");
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});

