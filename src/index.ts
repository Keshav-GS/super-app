import { app, BrowserWindow } from 'electron';
const path = require('path');
const { fork } = require('child_process');
import isDev from 'electron-is-dev'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let serverProcess: any;
let serverPort: number = 5000;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.webContents.on('will-navigate', (event, url) => {
    const { pathname } = new URL(url);
    const hasExtension = pathname.includes('.');
    if (!hasExtension) {
      event.preventDefault();
      mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    }
  });
};
const startServerAndWindow = async () => {
  let retries = 10;
  while (retries > 0) {
    try {
      // console.log('Waiting for server to start...');
      const res = await fetch(`http://localhost:${serverPort}/api/ping`);
      // console.log(res);
      if (res.ok) {
        console.log('Server is ready');
        createWindow();
        return;
      }
    } catch {
      retries--;
      await new Promise(resolve => setTimeout(resolve, 2500));
    }
  }
  console.error('Failed to start server after retries');
  app.quit();
};
// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // ðŸ”¥ Start the Express server

  const serverPath = path.join(__dirname, '../../backend/server.js');
  const userDataPath = app.getPath('userData');
  console.log(`Setting DB_PATH to: ${userDataPath}`);
  serverProcess = fork(serverPath, [], {
    env: {
      ...process.env,
      NODE_ENV: isDev ? 'development' : 'production',
      DB_PATH: userDataPath,
    },
    stdio: ['pipe', 'pipe', 'pipe', 'ipc'],
  });
  serverProcess.on('error', (err: Error) => console.error('Server process error:', err));
  serverProcess.on('exit', (code: any) => console.error(`Server process exited with code ${code}`));
  serverProcess.stdout.on('data', (data: any) => console.log(`Server stdout: ${data}`));
  serverProcess.stderr.on('data', (data: any) => console.error(`Server stderr: ${data}`));
  serverProcess.on('message', (msg: { port?: number }) => {
    if (msg.port) {
      serverPort = msg.port;
      console.log(`Server running on port ${serverPort}`);
    }
  });
  startServerAndWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (serverProcess) serverProcess.kill();
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import { ipcMain } from 'electron';
import fetch from 'node-fetch';
import FormData from 'form-data';
const API_BASE = "http://localhost:5000/api";
ipcMain.handle('login', async (_event, { email, password }) => {
  try {
    const response = await fetch(`${API_BASE}/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });
    if (!response.ok) {
      const errorData = await response.json() as { message?: string };
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }
    const userData: any = await response.json();
    return {
      ...userData,
      lastLogin: new Date().toISOString()
    };
  } catch (error) {
    throw new Error(error.message || 'Login failed');
  }
});

ipcMain.handle('get-products', async (_event, search) => {
  const res = await fetch(`${API_BASE}/products?search=${encodeURIComponent(search)}`);
  return res.json();
});

ipcMain.handle('add-product', async (_event, product) => {
  const response = await fetch(`${API_BASE}/products`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(product)
  });
  return response.json();
});

ipcMain.handle('updateProduct', async (_event, id, product) => {
  const res = await fetch(`${API_BASE}/products/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(product)
  });
  return res.json();
});

// ipcMain.handle('deleteProduct', async (_event, id) => {
//   const res = await fetch(`${API_BASE}/products/${id}`, {
//     method: 'DELETE'
//   });
//   return res.json();
// });

ipcMain.handle('upload-products-csv', async (_event, fileData) => {
  const buffer = Buffer.from(fileData.buffer);
  const form = new FormData();
  form.append('csvfile', buffer, { filename: fileData.name, contentType: fileData.type || 'text/csv' });

  const res = await fetch(`${API_BASE}/products/upload-csv`, {
    method: 'POST',
    body: form,
    headers: form.getHeaders(),
  });
  return res.json();
});

ipcMain.handle("get-orders", async (_event, filters) => {
  const params = new URLSearchParams(filters).toString();
  const res = await fetch(`${API_BASE}/orders?${params}`);
  return res.json();
});

ipcMain.handle("get-order-details", async (_event, id) => {
  const res = await fetch(`${API_BASE}/orders/${id}`);
  return res.json();
});

ipcMain.handle("save-order", async (_event, orderData) => {
  const res = await fetch(`${API_BASE}/orders`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(orderData),
  });
  return res.json();
});

ipcMain.handle("receive-order", async (_event, orderId) => {
  const res = await fetch(`${API_BASE}/orders/${orderId}/receive`, { method: "POST" });
  return res.json();
});

ipcMain.handle("delete-order", async (_event, id) => {
  const res = await fetch(`${API_BASE}/orders/${id}`, { method: "DELETE" });
  return res.json();
});

ipcMain.handle("get-suppliers", async () => {
  const res = await fetch(`${API_BASE}/suppliers`);
  return res.json();
});

ipcMain.handle("add-supplier", async (_event, supplierData) => {
  const res = await fetch(`${API_BASE}/suppliers`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(supplierData),
  });
  return res.json();
});


ipcMain.handle("record-sale", async (_event, saleData) => {
  const res = await fetch(`${API_BASE}/sales`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(saleData),
  });
  return res.json();
});

ipcMain.handle("get-sales", async () => {
  const res = await fetch(`${API_BASE}/sales`);
  return res.json();
});

ipcMain.handle("get-inventory", async () => {
  const res = await fetch(`${API_BASE}/inventory`);
  return res.json();
});
ipcMain.handle("get-reorder-suggestions", async () => {
  const res = await fetch(`${API_BASE}/inventory/reorder-suggestions`);
  return res.json();
});
ipcMain.handle("get-forecast", async (_event, productId) => {
  const res = await fetch(`${API_BASE}/inventory/forecast?productId=${productId}`);
  return res.json();
});
ipcMain.handle("record-stock-movement", async (_event, movementData) => {
  const res = await fetch(`${API_BASE}/inventory/movement`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(movementData),
  });
  return res.json();
});
ipcMain.handle("get-inventory-controls", async (_event, productId) => {
  const res = await fetch(`${API_BASE}/inventory-controls?productId=${productId}`);
  return res.json();
});
ipcMain.handle("save-inventory-control", async (_event, controlData) => {
  const res = await fetch(`${API_BASE}/inventory-controls`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(controlData),
  });
  return res.json();
});
// Analytics-related APIs
ipcMain.handle('get-analytics-data', async () => {
  const res = await fetch(`${API_BASE}/analytics`);
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});

ipcMain.handle('get-analytics-insights', async () => {
  const res = await fetch(`${API_BASE}/analytics/insights`);
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return res.json();
});
ipcMain.handle("get-ai-forecast", async (_event, productId) => {
  const res = await fetch(`http://localhost:5000/api/ai/forecast/${productId}`);
  return res.json();
});
ipcMain.handle("get-ai-anomaly", async (_event, productId) => {
  const res = await fetch(`http://localhost:5000/api/ai/anomaly/${productId}`);
  return res.json();
});
ipcMain.handle("get-nlq-insights", async (_event, productId) => {
  // console.log("Fetching NLQ insights in index for product ID:", productId);
  const res = await fetch("http://localhost:5000/api/ai/nlq", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ productId }),
  });
  const contentType = res.headers.get("content-type");
  if (!contentType || !contentType.includes("application/json")) {
    const text = await res.text();
    throw new Error(`Expected JSON, got: ${text.slice(0, 100)}`);
  }
  const data = await res.json();
  console.log("Main process NLQ data:", data);
  return data;
});



